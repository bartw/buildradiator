{"version":3,"sources":["src/app.js","src/environment.js","src/main.js","src/resources/index.js","src/services/build-service.js","src/services/fixed-array-of-failed-builds.js","src/services/mock-build-service.js","src/services/real-build-service.js","C:/Users/robs/Documents/OefProjects/teamcity-radiator/src/app.html"],"names":["setAllBuilds","app","service","getAllFailedBuilds","then","builds","App","debug","testing","configure","Promise","config","warnings","wForgottenReturn","aurelia","use","standardConfiguration","feature","developmentLogging","plugin","start","setRoot","BuildService","realBuildService","mockBuildService","baseUrl","MockBuildService","resolve","RealBuildService","client","url","init","method","headers","Headers","fetch","response","json","jsonResponse","buildType","filter","build","some","status"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import {BuildService} from 'services/build-service';\r\nimport {inject} from 'aurelia-framework';\r\n\r\nfunction setAllBuilds(app, service) {\r\n  service\r\n  .getAllFailedBuilds(\"mock\")\r\n  .then(builds => {app.builds = builds;} ) \r\n}\r\n\r\n@inject(BuildService)\r\nexport class App {\r\n  constructor(service) {\r\n    setAllBuilds(this, service);\r\n  }\r\n}\r\n","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\n\n//Configure Bluebird Promises.\n//Note: You may want to use environment-specific configuration.\nPromise.config({\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","export function configure(config) {\n  //config.globalResources([]);\n}\n","import {RealBuildService} from './real-build-service';\r\nimport {MockBuildService} from './mock-build-service';\r\nimport {inject} from 'aurelia-framework';\r\n\r\n@inject(RealBuildService, MockBuildService)\r\nexport class BuildService {\r\n  constructor(realBuildService, mockBuildService) {\r\n    this.realBuildService = realBuildService;\r\n    this.mockBuildService = mockBuildService;\r\n  }\r\n\r\n  getAllFailedBuilds(baseUrl) {\r\n    return baseUrl === 'mock' ? this.mockBuildService.getAllFailedBuilds() : this.realBuildService.getAllFailedBuilds(baseUrl);\r\n  }\r\n}","export default [\r\n    {\r\n        \"name\": \"Build2\",\r\n        \"builds\": {\r\n            \"build\": [\r\n                {\r\n                    \"status\": \"FAILURE\",\r\n                    \"statusText\": \"Tests failed: 4 (1 new), passed: 31\"\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    {\r\n        \"name\": \"Build8\",\r\n        \"builds\": {\r\n            \"build\": [\r\n                {\r\n                    \"status\": \"FAILURE\",\r\n                    \"statusText\": \"Tests failed: 18 (0 new), passed: 7\"\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    {\r\n        \"name\": \"Build12\",\r\n        \"builds\": {\r\n            \"build\": [\r\n                {\r\n                    \"status\": \"FAILURE\",\r\n                    \"statusText\": \"Tests failed: 258 (52 new), passed: 0\"\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    {\r\n        \"name\": \"Build15\",\r\n        \"builds\": {\r\n            \"build\": [\r\n                {\r\n                    \"status\": \"FAILURE\",\r\n                    \"statusText\": \"Tests failed: 1 (1 new), passed: 4\"\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    {\r\n        \"name\": \"Build18\",\r\n        \"builds\": {\r\n            \"build\": [\r\n                {\r\n                    \"status\": \"FAILURE\",\r\n                    \"statusText\": \"Tests failed: 8 (2 new), passed: 29\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n];","import fixedArrayOfFailedBuilds from './fixed-array-of-failed-builds';\r\n\r\nexport class MockBuildService {\r\n  getAllFailedBuilds() {\r\n    return Promise.resolve(fixedArrayOfFailedBuilds);\r\n  }\r\n}\r\n","import {HttpClient} from 'aurelia-fetch-client';\r\nimport {inject} from 'aurelia-framework';\r\n\r\n@inject(HttpClient)\r\nexport class RealBuildService {\r\n  constructor(client) {\r\n    this.client = client;\r\n  }\r\n\r\n  getAllFailedBuilds(baseUrl) {\r\n    let url =  baseUrl + '/guestAuth/app/rest/buildTypes?locator=affectedProject:(id:_Root)&fields=buildType(id,name,builds($locator(running:false,canceled:false,count:1),build(number,status,statusText)))';\r\n    \r\n    let init =  {\r\n      method: 'GET',\r\n      headers: new Headers({\r\n        'Accept': 'application/json',\r\n        'X-Requested-With': 'Fetch',\r\n      })\r\n    };\r\n    \r\n    return this.client.fetch(url, init)\r\n    .then(response => response.json())\r\n    .then(jsonResponse => jsonResponse.buildType.filter(buildType => buildType.builds.build.some(build => build.status === 'FAILURE')));\r\n  }\r\n}\r\n",null],"sourceRoot":"..\\src"}